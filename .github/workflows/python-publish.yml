name: CI/CD - Python Package

on:
  push:
    paths:
      - "**.py"
      - "**.toml"
      - "**.yml"
  pull_request:
    paths:
      - "**.py"
      - "**.toml"
      - "**.yml"
  release:
    types:
      - published
  workflow_dispatch:

permissions:
  contents: read

jobs:
  test:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/xrobot-org/docker-image-stm32:main
      options: --user 0

    steps:
    - uses: actions/checkout@v4

    - name: Install Python Package
      run: |
        pip install .

    - name: Get Test Project
      uses: actions/checkout@v4
      with:
        repository: Jiu-xiao/libxr_stm32_test
        path: test-project

    - name: Run Tests
      run: |
        cd test-project && ./test.sh

  build:
    name: Build & Test (${{ matrix.os }} - ${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    needs: test

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        arch: [x86_64, arm64]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install dependencies (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install pytest flake8 black build twine

      - name: Install dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          python -m pip install --upgrade pip
          if (Test-Path "requirements.txt") { pip install -r requirements.txt }
          pip install pytest flake8 black build twine

      - name: Build Package
        run: |
          python -m build

      - name: Check Package Metadata
        run: |
          twine check dist/*

      - name: Rename built package files (Linux/macOS)
        if: runner.os != 'Windows'
        run: |
          for file in dist/*.whl dist/*.tar.gz; do
            if [[ -f "$file" ]]; then
              new_name=$(echo "$file" | sed -E "s/^dist\/libxr-([0-9]+\.[0-9]+\.[0-9]+)-py([0-9]+)-none-any\.(whl|tar.gz)$/dist\/libxr-\1-py\2-none-any.\3/")
              if [[ "$file" != "$new_name" ]]; then  # ✅ 只有当文件名变化时才执行 mv
                mv "$file" "$new_name"
              fi
            fi
          done
          ls -lh dist/  # ✅ 确保文件格式正确

      - name: Rename built package files (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          Get-ChildItem -Path dist/* -Include *.whl, *.tar.gz | ForEach-Object {
            $newName = $_.Name -replace '^libxr-([0-9]+\.[0-9]+\.[0-9]+)-py([0-9]+)-none-any\.(whl|tar.gz)', 'libxr-$1-py$2-none-any.$3'
            if ($_.Name -ne $newName) {  # ✅ 只有当文件名变化时才重命名
              Rename-Item -Path $_.FullName -NewName $newName
            }
          }
          Get-ChildItem -Path dist/  # ✅ 确保文件格式正确

      - name: Upload Built Package
        uses: actions/upload-artifact@v4
        with:
          name: python-package-${{ matrix.os }}-${{ matrix.arch }}-py${{ matrix.python-version }}
          path: dist/*

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'release'

    permissions:
      id-token: write

    environment:
      name: XRobot
      url: https://pypi.org/project/libxr

    steps:
      - name: Download built packages
        uses: actions/download-artifact@v4
        with:
          path: dist/

      - name: Move built packages to root dist/
        run: |
          find dist/ -mindepth 2 -type f -exec mv {} dist/ \;
          rm -rf dist/python-package-*  # 清理空文件夹
          ls -lh dist/  # ✅ 确保文件都在 dist/ 根目录

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          username: XRobot
          password: ${{ secrets.TOKEN }}
